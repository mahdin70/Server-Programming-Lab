Lab - 01 : 
------------------------------------------------------------------

Middleware : Middleware are functions that process incoming requests before they reach the route handler.
Middleware does tasks such as authentication, data validation, logging, error handling etc

HTTP utility methods does tasks like parsing request bodies, managing cookies, serving static files etc.
Template Engine : EJS, Pug, Handlebars

npm init - Initialize the Node Project
package.json : Metadata and Configuration file of the project also we can include depend, scripts and more.
package-lock.json : Detailed and version specific record of the installed packages.

The downloaded package files are stored in "node_modules"


Arrow Function : Compact Version of the Function.  //One Line Function
const multiply = (x, y) => x * y;

"/" root path of the application

app.get( '/', (req,res) => {
   res.send('Hello World');
}

(req, res) => {- - - -}  
This is the callback function
This is executed when a client makes a GET request to the specified route. The callback function takes two parameters: req
(request) and res (response)

A callback function, often referred to simply as a "callback," is a function that is passed as an argument to another function and is executed after the completion of a specific task. The idea is that the callback function is "called back" at a later point in time.


req Object represents incoming HTTP request from the Client. (Headers, Query Parameters)
res Object represents the outgoing Response 

HTTP Methods : 
-------------------------
GET: Retrieve a representation of the specified resource.

POST: Submit data to be processed to a specified resource, often creating a new resource.

PUT: Update a resource or create a new one if it does not exist at the specified URI.

DELETE: Request the removal or deletion of a resource at the specified URI.

PATCH: Apply partial modifications to a resource, updating it with specified changes.

HEAD: Request only the headers of a resource, used for checking resource existence or obtaining metadata.

OPTIONS: Describe communication options for the target resource without implying a specific action.

TRACE: Perform a message loop-back test along the path to the target resource for diagnostic purposes.

CONNECT: Establish a network connection to a resource, typically for secure communication through an encrypted tunnel.


HTTP Status Code :
------------------------------
1xx (Informational):.
2xx (Successful): 
3xx (Redirection):
4xx (Client Error): 
5xx (Server Error): 

200 (OK)
201 (Created)
400 (Bad Request)
401 (Unauthorized)
403 (Forbidden)
404 (Not Found)
500 (Internal Server Error)
502 (Bad Gateway)



Promise ekta object jeta ekta asynchronous operation er eventual completion or failure represent kore
.then() method ase etar - successful hoile ki korte hobe trpr sheta likha thake er vitore
.catch() -  error khaile ki korte hobe sheta lekha thake 

* async function er moddhe amra "await" keyword use korte pari
eta use kore amra execution pause korte pari ekta promise resolve howar aag porjonto


Lab - 02 : 
----------------------------------------------------------------------------------------------------------------------------

Modules help to organize and structure the Node.js application by breaking down into smaller, reusable pieces

Built In Module : OS, File System etc
User-Defined Modules: Developer ra create kore as a javascript file.To create a user-defined module, you typically create a separate JavaScript file and then export functions, objects, or variables from that file "module.exports" use kore 

- Body-parser ekta middleware jeta incoming HTTP Request body ke handle kore by parsing that format.


Ekta JS file e onekgula variable, function likhlam ekhn egula to amake onno file er jnno accessible banano lagbe right ?
Tokhon ki korbo ? Obviously export korbo 

module.exports = {isAuthenticated, users, };


tahole import kmne korbo ?

const {isAuthenticated, users }  = require('./middleware');   //karon ager jinishgula middleware thekei export korsilam



Routes : 

Route definition emne kora hoy : 
app.METHOD (PATH, HANDLER)

HANDLER mane ekhane ekta callback function ke bujhano hoise jeta route r method match korle execute hoy

- Response er sathe amra status code kmne pathai ?
res . status(401) . json({error : You Do not Have access})






Lab - 03 : 
---------------------------------------------------------------------------------------------------------------------------------


Serialize : User Object ke session e convert korar process jate store kora jay
Deserialize : Session theke user identifier niye oitake abr User object banano.

Session : false - eta passport er ekta middleware "authenticate() e use kora hoy jetar mane hocche jate authentication state session e store na kore




- Controller is a type of middleware jeta ekta specific route othoba set of routes er logic handle kore.

- Passport is a popular authentication middleware for Node.js web applications

- CORS - Cross Origin Resource Sharing
enables controlled access to resources located outside of a given domain. 


Lab - 04 :
-----------------------------------------------------------------------------------------------------------------------------------
Changes made in app.js for using static files : 

app.use(express.static('./uploads')

Session-Based Authentication:
Session-based authentication involves the server creating a unique session for a user upon login, with the session stored server-side. A session identifier is sent to the client as a cookie, and subsequent requests include this identifier. The server validates the session, allowing access if the user is authenticated. Logout destroys the session, and the session identifier is removed from the client. While straightforward, it requires server-side storage and may be less suitable for stateless architectures.

Token-Based Authentication:
Token-based authentication generates a unique token upon login, containing user information, which is sent to the client. Subsequent requests include the token for validation. Tokens are often stored client-side, eliminating the need for server-side storage. Tokens can have expiration times, and some systems use refresh tokens for seamless renewal. Token-based authentication is stateless, scalable, and suitable for mobile and single-page applications, offering simplicity and ease of implementation.


Lab - 05 : 
----------------------------------------------------------------------------------------------------------------------------------

Multer is a middleware for handling basically uploading files.

Multer needs to be configured with a storage engine. The storage engine determines where to save the uploaded files and what to name them.

Ami multer.diskStorage() use kore define korte pari je ami uploads gula kothay rakhbo amr local machine e

const multer = require('multer');

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/'); // Set the destination folder for uploaded files
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname); // Set a unique filename for each uploaded file
  },
});

const upload = multer({ storage: storage });






























